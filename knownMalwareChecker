#!/opt/local/bin/bash

#############################################################################
#
# General Description:
#
# This is a small program that is run via cron every 10 minutes to
# automatically check for various known malware signatures.  
#
# When adding new viruses or malware to check, consider that the program is run
# via cron quite often, so if the checks are CPU or IO intensive you may need
# to consider to change the cron entry so that it is not run so often.
#
# Currently it only knows how to check for the OSX.Proton malware.
#
#
#
#############################################################################


#############################################################################
#
# Define the global variables:
#
declare -a errorsFound=()
declare    targetEmailAddressee="kevin.barth@me.com"
#
#############################################################################


#############################################################################
#
# Define the subroutines used...
#
#############################################################################
protonChecker() {
  #
  # OSX.Proton:  Proton is a remote-control trojan designed specifically for
  # Mac systems. It opens a backdoor granting root-level command-line access to
  # commandeer the computer, and can steal passwords, encryption and VPN keys,
  # and crypto-currencies from infected systems. It can gain access to a
  # victim's iCloud account, even if two-factor authentication is used, and
  # went on sale in March with a $50,000 price tag.
  #
  #
  # Reset the builtin SECONDS variable to enable you to show how long this
  # section of code took to execute.  I am thinking that this will be much less
  # than a second, so do not be surprised if it always prints out zero or 1,
  # depending upon how it treat the rounding of sub-second intervals....
SECONDS=0

  declare -a filesToCheck=(/tmp/Updater.app
/Library/LaunchAgents/com.Eltima.UpdaterAgent.plist
/Library/.rand
/Library/.rand/updateragent.app
)
  #echo "filesToCheck[0]=[${filesToCheck[3]}]"

  declare -i headerFlag=1

  for (( i=0; i<${#filesToCheck[@]}; i++ ))  ; do
    #printf "\n\nChecking for file [${filesToCheck[$i]}]\n"
    #if [[ ! -e "${filesToCheck[$i]}" ]] ; then       #debugging ____
    if [[ -e "${filesToCheck[$i]}" ]] ; then
      if (( headerFlag )) ; then
        # print the header and reset the header flag...
        errorsFound+=("\n\n\n************************* BEGIN OSX.Proton Malware Section **************************\n\n")
        headerFlag=0
      fi
      errorsFound+=("WARNING:  'OSX.Proton' malware file signature detected!  Offending file: [${filesToCheck[$i]}]")
    fi
  done

  if (( ${#errorsFound[@]} > 0 )) ; then
    errorsFound+=("\n\nAccording to this article at:\n\t http://www.theregister.co.uk/2017/10/20/mac_os_reinstall_eltima_elmedia_malware\n...you must do a full reinstall ASAP or risk loss of files and passwords!\n\n")
    errorsFound+=("\n\nINFO: The protonChecker section of this program took [$SECONDS] seconds to execute...\n\n")
    #
    # Reset the SECONDS variable:
    SECONDS=0
  fi
}



#############################################################################
#
# Program main() logic begins below...
#
#############################################################################

protonChecker

#
# Add any other malware identities to check here....
#


#
# End of error checking:
#
# If any errors were found, send off email to the targetEmailAddressee...:
if (( ${#errorsFound[@]} > 0 )) ; then
  #printf "\n\n******* Sending error email to me...\n"
  #printf "\nError messages: \n"
  #printf "\nNumber of elements in the array:   ${#errorsFound[@]}\n"
  for (( i=0; i<${#errorsFound[@]}; i++ )) ; do
    printf "${errorsFound[$i]}\n"
  done | mail -s "WARNING: Malware signatures found by cron job [$0] on your system [$(hostname)]; Address ASAP!!!" $targetEmailAddressee
fi
