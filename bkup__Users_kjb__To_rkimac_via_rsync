#!/opt/local/bin/bash

#
# This program backs up the entire /Users/kjb directory structure from my laptop to the rk-imac system.
#
#
#
printf -v ts "%(%Y-%m-%d_%H:%M:%S)T" -1

      myProg="${0##*/}"
       logDir="/Users/kjb/log"
stdoutLogFile="${logDir}/${myProg}_stdout_${ts}"
stderrLogFile="${logDir}/${myProg}_stderr_${ts}"

#
# Note that rsync has been set up on rk-imac to have exported "Module" 'Users' pointing to path '/Users'...
#
 rsyncModule="Users"
#
#
# Note that we are using the --relative option which means "rsync <options> /Users/./kjb rk-imac.local::Users/" does what you want it to!
#
   sourceDir="/Users/./kjb"
   destDir=""                  # Not an error here, this way it works properly... (or at least, "as designed")
targetSystem="rk-imac.local"

#
# First let us make sure we can reach the target:
#
ping -qo -c1 -t1 $targetSystem >/dev/null 2>&1 && printf "\n\nThe target host [${targetSystem}] is reachable over the network...\n\n" || {
  printf "Cannot reach the target host [${targetSystem}]; it is NOT reachable over the network. \n  --Diagnose and resolve before retrying to run this program..."
  exit
}

#
# Create the rather useful timestamp file indicating the last time this was run...
#
touch ${sourceDir}/___LastRunOf___${myProg}.ts

#
# For debugging, set the following...
#      dryRun="--dry-run"

#
# What follows is a complete list of the rsync optoins used to accomplish this task:
#
# -a, --archive               archive mode; equals -rlptgoD (listed below for convenience)
#            -r, --recursive             recurse into directories
#            -l, --links                 copy symlinks as symlinks
#            -t, --times                 preserve modification times
#            -p, --perms                 preserve permissions
#            -g, --group                 preserve group
#            -o, --owner                 preserve owner (super-user only)
#            -D                          same as --devices --specials (listed below for convenience)
#                    --devices               preserve device files (super-user only)
#                    --specials              preserve special files
# -A, --acls                  preserve ACLs (implies -p)
# -X, --xattrs                preserve extended attributes
# -z, --compress              compress file data during the transfer
#            --skip-compress=LIST    skip compressing files with suffix in LIST  (as this is not 
#                                     stipulated in my options, it is supposed to default to 
#                                     NOT-compressing -- that is "skipping" -- the files with the 
#                                     following suffixes: 
#                                        7z  ace  avi bz2 deb gpg gz iso jpeg jpg lz lzma lzo mov mp3 mp4
#                                        ogg png rar rpm rzip tbz tgz tlz txz xz z zip
#
# -H, --hard-links            preserve hard links
# -P                          same as --partial --progress (listed below for convenience)
#                --partial               keep partially transferred files
#                --progress              show progress during transfer
#
# -h, --human-readable        output numbers in a human-readable format
#
#
#  And the extra ones...
#            --delete                delete extraneous files from dest dirs
#            --delete-excluded       also delete excluded files from dest dirs
#            --inplace               update destination files in-place 
#                  (note that the "-S, --sparse                handle sparse files efficiently" option cannot be used with --inplace!)
#            --bwlimit=RATE          limit socket I/O bandwidth  (RATE of 0 means unlimited bandwidth
#        -x, --one-file-system       don't cross filesystem boundaries
#        -R, --relative              use relative path names

rsyncOptionList="-azhxAXHP ${dryRun} --delete --delete-excluded --inplace --bwlimit=0 \
                 --exclude .DS_Store \
                 --exclude .fseventsd \
                 --exclude .Spotlight-V100 \
                 --exclude .TemporaryItems \
                 --exclude .Trashes \
                 --relative "


#
#
#
#  .... and below are the rest of the rsync options that I am not using for this job of backing up my home directory to another OS X system...:
#
#        -c, --checksum              skip based on checksum, not mod-time & size
#        -v, --verbose               increase verbosity
#            --info=FLAGS            fine-grained informational verbosity
#            --debug=FLAGS           fine-grained debug verbosity
#            --msgs2stderr           special output handling for debugging
#        -q, --quiet                 suppress non-error messages
#            --no-motd               suppress daemon-mode MOTD (see caveat)
#            --no-implied-dirs       don't send implied dirs with --relative
#        -b, --backup                make backups (see --suffix & --backup-dir)
#            --backup-dir=DIR        make backups into hierarchy based in DIR
#            --suffix=SUFFIX         backup suffix (default ~ w/o --backup-dir)
#        -u, --update                skip files that are newer on the receiver
#            --append                append data onto shorter files
#            --append-verify         --append w/old data in file checksum
#        -d, --dirs                  transfer directories without recursing
#        -L, --copy-links            transform symlink into referent file/dir
#            --copy-unsafe-links     only "unsafe" symlinks are transformed
#            --safe-links            ignore symlinks that point outside the tree
#            --munge-links           munge symlinks to make them safer
#        -k, --copy-dirlinks         transform symlink to dir into referent dir
#        -K, --keep-dirlinks         treat symlinked dir on receiver as dir
#        -E, --executability         preserve executability
#            --chmod=CHMOD           affect file and/or directory permissions
#        -O, --omit-dir-times        omit directories from --times
#        -J, --omit-link-times       omit symlinks from --times
#            --super                 receiver attempts super-user activities
#            --fake-super            store/recover privileged attrs using xattrs
#            --preallocate           allocate dest files before writing
#        -n, --dry-run               perform a trial run with no changes made
#        -W, --whole-file            copy files whole (w/o delta-xfer algorithm)
#        -B, --block-size=SIZE       force a fixed checksum block-size
#        -e, --rsh=COMMAND           specify the remote shell to use
#            --rsync-path=PROGRAM    specify the rsync to run on remote machine
#            --existing              skip creating new files on receiver
#            --ignore-existing       skip updating files that exist on receiver
#            --remove-source-files   sender removes synchronized files (non-dir)
#            --del                   an alias for --delete-during
#            --delete-before         receiver deletes before xfer, not during
#            --delete-during         receiver deletes during the transfer
#            --delete-delay          find deletions during, delete after
#            --delete-after          receiver deletes after transfer, not during
#            --ignore-missing-args   ignore missing source args without error
#            --delete-missing-args   delete missing source args from destination
#            --ignore-errors         delete even if there are I/O errors
#            --force                 force deletion of dirs even if not empty
#            --max-delete=NUM        don't delete more than NUM files
#            --max-size=SIZE         don't transfer any file larger than SIZE
#            --min-size=SIZE         don't transfer any file smaller than SIZE
#            --partial-dir=DIR       put a partially transferred file into DIR
#            --delay-updates         put all updated files into place at end
#        -m, --prune-empty-dirs      prune empty directory chains from file-list
#            --numeric-ids           don't map uid/gid values by user/group name
#            --usermap=STRING        custom username mapping
#            --groupmap=STRING       custom groupname mapping
#            --chown=USER:GROUP      simple username/groupname mapping
#            --timeout=SECONDS       set I/O timeout in seconds
#            --contimeout=SECONDS    set daemon connection timeout in seconds
#        -I, --ignore-times          don't skip files that match size and time
#            --size-only             skip files that match in size
#            --modify-window=NUM     compare mod-times with reduced accuracy
#        -T, --temp-dir=DIR          create temporary files in directory DIR
#        -y, --fuzzy                 find similar file for basis if no dest file
#            --compare-dest=DIR      also compare received files relative to DIR
#            --copy-dest=DIR         ... and include copies of unchanged files
#            --link-dest=DIR         hardlink to files in DIR when unchanged
#            --compress-level=NUM    explicitly set compression level
#        -C, --cvs-exclude           auto-ignore files in the same way CVS does
#        -f, --filter=RULE           add a file-filtering RULE
#        -F                          same as --filter='dir-merge /.rsync-filter'
#                                    repeated: --filter='- .rsync-filter'
#            --exclude=PATTERN       exclude files matching PATTERN
#            --exclude-from=FILE     read exclude patterns from FILE
#            --include=PATTERN       don't exclude files matching PATTERN
#            --include-from=FILE     read include patterns from FILE
#            --files-from=FILE       read list of source-file names from FILE
#        -0, --from0                 all *from/filter files are delimited by 0s
#        -s, --protect-args          no space-splitting; wildcard chars only
#            --address=ADDRESS       bind address for outgoing socket to daemon
#            --port=PORT             specify double-colon alternate port number
#            --sockopts=OPTIONS      specify custom TCP options
#            --blocking-io           use blocking I/O for the remote shell
#            --outbuf=N|L|B          set out buffering to None, Line, or Block
#            --stats                 give some file-transfer stats
#        -8, --8-bit-output          leave high-bit chars unescaped in output
#        -i, --itemize-changes       output a change-summary for all updates
#        -M, --remote-option=OPTION  send OPTION to the remote side only
#            --out-format=FORMAT     output updates using the specified FORMAT
#            --log-file=FILE         log what we're doing to the specified FILE
#            --log-file-format=FMT   log updates using the specified FMT
#            --password-file=FILE    read daemon-access password from FILE
#            --list-only             list the files instead of copying them
#            --write-batch=FILE      write a batched update to FILE
#            --only-write-batch=FILE like --write-batch but w/o updating dest
#            --read-batch=FILE       read a batched update from FILE
#            --protocol=NUM          force an older protocol version to be used
#            --iconv=CONVERT_SPEC    request charset conversion of filenames
#            --checksum-seed=NUM     set block/file checksum seed (advanced)
#        -4, --ipv4                  prefer IPv4
#        -6, --ipv6                  prefer IPv6
#            --version               print version number
#       (-h) --help                  show this help (see below for -h comment)

commandLine="/opt/local/bin/rsync $rsyncOptionList $sourceDir $targetSystem::${rsyncModule}/${destDir}"

#
# Experiemental...
#
# This was all inspired because I wanted to make it so that I had a log of both stdout and stderr in separate logs, 
# whilst *at the same time* I also output both of these to the terminal, also *in real-time*.
#
# This proved to be more trouble than it was worth using FD manipulation!  HOWEVER, I found out how to do 
# it (to some degree) using process substition, aka:
#
#     -$ cat lljklj  ./mySmallFile 1> >( tee /tmp/stdout )  2> >( tee /tmp/stderr )
#
#  ...the problem is that in the above example, the '/tmp/stdout' file still ends up with the error message in it!  Don't ask me why, I do not care anymore!!!!
#
#
test -t 0
if (( $? == 0 )) ; then
  #
  # FD 0 (stdin) is open and is assciated with a terminal
  #
   {  
     printf "\n************************\n%(%Y-%m-%d %H:%M:%S)T:  Doing command line [$commandLine]...\n" -1
     $commandLine 
     printf "\n************************\n%(%Y-%m-%d %H:%M:%S)T:  The rsync command completed with exit code [$?]...\n" -1
   } 1> >( tee ${stdoutLogFile} )  2> >( tee ${stderrLogFile} )
else
  #
  # FD 0 (stdin) is closed or is NOT assciated with a terminal
  #
   {  
     printf "\n************************\nNO TTY ATTACHED\n%(%Y-%m-%d %H:%M:%S)T:  Doing command line [$commandLine]...\n" -1
     $commandLine 
     printf "\n************************\n%(%Y-%m-%d %H:%M:%S)T:  The rsync command completed with exit code [$?]...\n" -1
   } 1> ${stdoutLogFile} 2> ${stderrLogFile}
fi

#
# Compress the log files...
#
xz ${stdoutLogFile}
xz ${stderrLogFile}

#
# trim the log files...
#
i=1 ; for logfile in $(ls -1t /Users/kjb/log/bkup__Users_kjb__To_rkimac_via_rsync* ) ; do 
  # 
  # first make sure the file is owned by the desired owner:
  eval $(stat -s "${logfile}" )
  (( st_uid != 501 )) && chown 501 "${logfile}"
  if (( i++ >= 10 )) ; then
    printf "Removing expired log file:  [${logfile}]\n" 
    rm "${logfile}"
  fi
done

